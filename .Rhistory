demo()
graphics
help.start()
q()
pwd
getwd()
getwd()
getwd()
vec <- vector(1:4, colnames = c(p,d,t,c))
?vector
vec <- vector(1:4)
vec <- 1:4
names(vec)
names(vec) <- c(p,d,t,c)
names(vec) <- c("p","d","t","c")
vect
vec
dim(vec) <- dim(2,3)
dim(vec) <- dim(2,)
dim(vec) <- dim(2,2)
dim(vec) <- c(2,2)
vec
t(vec)
?dim
dimnames(vec)
vec
class(vec)
m <- vec
m
colnames(m) <- c("prvi","drugi")
m
rownames(m) <- c("prvi-r","drugi-r")
m
t(m)
m
rowSum(m)
rowSums(m)
m <- cbind(m,rowSums())
m <- cbind(m,rowSums(m))
m
?colnames
colnames(m)[3] <- "treci"
m
m <- rbind(m,colSums(m))
m
rownames(m)[3] <- "treci"
m
rownames(m, prefix = "igi")
m
rownames(m, prefix = "igi", do.NULL = FALSE)
m
rownames(m) <- C(NULL, NULL NULL)
rownames(m) <- C(NULL, NULL, NULL)
rownames(m) <- C(NA, NA, NA)
rownames(m) <- c(NULL, NULL, NULL)
m
rownames(m, prefix = "igi")
m
rownames(m, prefix = "igi", do.NULL = TRUE)
m
rownames(m, prefix = "igi", do.NULL = FALSE
)
m
rownames(m, prefix = "igi", do.NULL = FALSE)
m
rownames (m) <. rownames(m, prefix = "igi", do.NULL = FALSE)
rownames (m) <- rownames(m, prefix = "igi", do.NULL = FALSE)
m
colnames (m) <- colnames(m, prefix = "xx", do.NULL = FALSE)
m
colnames (m) <- colnames(m, prefix = "col", do.NULL = FALSE)
m
colnames (m) <- colnames(m, prefix = "col", do.NULL = TRUE)
m
m2 <- cbind(1, 1:4)
m2
colnames(m2, do.NULL = FALSE)
m2
colnames(m2) <- c("x","Y")
m2
rownames(m2) <- rownames(m2, do.NULL = FALSE, prefix = "Obs.")
m2
rm(m2)
m2 <- cbind(1, 1:4)
m2
colnames(m) <- colnames(m2, do.NULL = FALSE)
colnames(m2) <- colnames(m2, do.NULL = FALSE)
m2
colnames(m2) <- colnames(m2, do.NULL = FALSE, prefix = "ii")
m2
rm(m2)
m2 <- cbind(1, 1:4)
colnames(m2) <- colnames(m2, do.NULL = FALSE, prefix = "ii")
m2
colnames(m2) <- colnames(m2, do.NULL = FALSE, prefix = "gz")
m2
colnames(m2) <- c(NULL)
m2
colnames(m2) <- colnames(m2, do.NULL = FALSE, prefix = "gz")
m2
colnames(m2) <- NULL
m2
vec <- c("P", "D", "D", "T","P")
fa <- factor(vec)
fa
levels(fa) <- c("Prvi","Drugi", "Treci")
fa
fa <- factor(vec)
fa
levels(fa) <- c("xxx","yyyDrugi", "Treci")
fa
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector()
s <- makeVector()
s
s$set
s$set(1:4)
s$get()
s&getmean()
s&getmean
s&get
s$getmean
s$getmean()
s$setmean()
cs()
clearscreen()
ls()
makeVector
mm y- makeVector()
mm <- makeVector()
mm
makeVector
mm$set(1:4)
mm$get()
mm$getmean()
mm$setmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
mm$setmean(mean(1:4))
mm$getmean()
cachemean(1:10)
cachemean(mm)
mm$setmean(NULL)
cachemean(mm)
getwd()
setwd("C:/Users/user/Dropbox/learning/Coursera/10-Data-Science/work/ProgrammingAssignment2")
x <- matrix(1:6, nrows= 3)
x <- matrix(1:6, nrow= 3)
x
solve(x)
x <- matrix(1:16, nrow= 4, byrow = TRUE)
x
solve(x)
?solve
x <- matrix(rnorm(16), nrow= 4, byrow = TRUE)
x
solve(x)
x <- matrix(c(1,2,3,4), nrow = 2)
solve(x)
x
solve(x)%*% matrix(c(1,1))
matrix(c(1,1))
## IR236
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
ix <- NULL
set <- function (y){
x <<- y
ix <- NULL
}
get <- function () x
setsolved <- function(s) ix <<- s
getsolved <- function () ix
list(set = set, get = get, setsolved = setsolved,getsolved = getsolved)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolved()
if(!is.null(s)){
message("getting cached data")
return (s)
}
data <- x$get()
s <- solve(data)
x$setsolved(s)
s
}
mym <- matrix(c(1,2,3,4). nrow = 2)
mym <- matrix(c(1,2,3,4), nrow = 2)
solve(mym)
mm2 <- makeCacheMatrix(mym)
mm2
mm2.get()
mm2$get
mm2$get()
cacgSolve(mm2)
cacheSolve(mm2)
cacheSolve(mm2)
